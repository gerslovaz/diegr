% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/point_mesh.R
\name{make_triangulation}
\alias{make_triangulation}
\title{Make triangulation of 2D point mesh}
\usage{
make_triangulation(mesh)
}
\arguments{
\item{mesh}{A data frame or tibble with named columns: \code{x}, \code{y} (required) and \code{index} (optionally). It should optimally be a \code{D2} element of a \code{"mesh"} object or a list with the same structure.}
}
\value{
A three column matrix with indices of the vertices of the triangles.
}
\description{
Function for creating Delaunay type-I triangulation (see Schumaker 2007) with consistent oriented edges adapted for a regular point mesh created by \code{\link{point_mesh}} function.
See Details for more information.
}
\details{
The type-I Delaunay triangulation is a triangulation obtained by drawing in the north-east diagonals in all subrectangles of the triangulated area.
Due to the regularity of the input mesh (in the sense of distances between mesh points), a simplified procedure is used: The triangulation is created within the individual strips and then bound together.
The order of the vertices is chosen to maintain a consistent orientation of the triangles (for more details see Schneider 2003).
}
\examples{

# a) Create small mesh for triangulation example
M <- point_mesh(n = 500, template = "HCGSN256")

# b) Make triangulation on this mesh
TRI <- make_triangulation(M$D2)
head(TRI)
\dontrun{
## Note: this code opens a rgl 3D viewer
# c) Plot the result triangulation as 3D wire model using rgl
 rgl::wire3d(mesh3d(M$D3$x, M$D3$y, M$D3$z, triangles = t(TRI)))
 }
}
\references{
Lai M-J, Schumaker LL. \emph{Spline functions on triangulations.} Cambridge University Press; 2007.

Schneider PJ, Eberly DH. \emph{Geometric Tools for Computer Graphics.} The Morgan Kaufmann Series in Computer Graphics. San Francisco: Morgan Kaufmann, 2003.
}
